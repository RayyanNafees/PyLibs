export const __all__ = function() {};
export const __builtins__ = function() {};
export const __cached__ = function() {};

export const __file__ = function() {};
export const __loader__ = function() {};
export const __name__ = 'csv';
export const __package__ = function() {};
export const __spec__ = function() {};
export const __version__ = function() {};


export const Dialect = function() {};
export const DictReader = function() {};
export const DictWriter = function() {};
//export const Error = function() {};
export const QUOTE_ALL = function() {};
export const QUOTE_MINIMAL = function() {};
export const QUOTE_NONE = function() {};
export const QUOTE_NONNUMERIC = function() {};
export const Sniffer = function() {};
export const StringIO = function() {};
export const _Dialect = function() {};
export const excel = function() {};
export const excel_tab = function() {};
export const field_size_limit = function() {};
export const get_dialect = function() {};
export const list_dialects = function() {};
export const re = function() {};
export const reader = function() {};
export const register_dialect = function() {};
export const unix_dialect = function() {};
export const unregister_dialect = function() {};
export const writer = function() {};

export const __doc__ = `
CSV parsing and writing.

This module provides classes that assist in the reading and writing
of Comma Separated Value (CSV) files, and implements the interface
described by PEP 305.  Although many CSV files are simple to parse,
the format is not formally defined by a stable specification and
is subtle enough that parsing lines of a CSV file with something
like line.split(",") is bound to fail.  The module supports three
basic APIs: reading, writing, and registration of dialects.


DIALECT REGISTRATION:

Readers and writers support a dialect argument, which is a convenient
handle on a group of settings.  When the dialect argument is a string,
it identifies one of the dialects previously registered with the module.
If it is a class or instance, the attributes of the argument are used as
the settings for the reader or writer:

    class excel:
        delimiter = ','
        quotechar = '"'
        escapechar = None
        doublequote = True
        skipinitialspace = False
        lineterminator = '\r\n'
        quoting = QUOTE_MINIMAL

SETTINGS:

    * quotechar - specifies a one-character string to use as the
        quoting character.  It defaults to '"'.
    * delimiter - specifies a one-character string to use as the
        field separator.  It defaults to ','.
    * skipinitialspace - specifies how to interpret whitespace which
        immediately follows a delimiter.  It defaults to False, which
        means that whitespace immediately following a delimiter is part
        of the following field.
    * lineterminator -  specifies the character sequence which should
        terminate rows.
    * quoting - controls when quotes should be generated by the writer.
        It can take on any of the following module constants:

        csv.QUOTE_MINIMAL means only when required, for example, when a
            field contains either the quotechar or the delimiter
        csv.QUOTE_ALL means that quotes are always placed around fields.
        csv.QUOTE_NONNUMERIC means that quotes are always placed around
            fields which do not parse as integers or floating point
            numbers.
        csv.QUOTE_NONE means that quotes are never placed around fields.
    * escapechar - specifies a one-character string used to escape
        the delimiter when quoting is set to QUOTE_NONE.
    * doublequote - controls the handling of quotes inside fields.  When
        True, two consecutive quotes are interpreted as one during read,
        and when writing, each quote character embedded in the data is
        written as two quotes
`;